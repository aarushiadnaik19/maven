package com.cg.emp;

import javax.persistence.EntityManager;
import javax.persistence.EntityTransaction;

public class EmployeeDAO {

    private EntityManager em;

   
    public EmployeeDAO(EntityManager em) {
        this.em = em;
    }

  
    public void createEmployee(Employee emp) {
        EntityTransaction transaction = em.getTransaction();
        try {
            transaction.begin();
            em.persist(emp); // Save the Employee object into the database
            transaction.commit();
            System.out.println("Employee has been created with ID " + emp.getId() );
        } catch (RuntimeException e) {
            if (transaction.isActive()) {
                transaction.rollback(); 
            }
            else {
            throw e; 
        }
    }}

    // Method to find an Employee by ID
    public void findEmployeeById(int id) {
        EntityTransaction transaction = em.getTransaction();
        try {
            transaction.begin();
            Employee emp = em.find(Employee.class, id); 
            transaction.commit();
            if (emp != null) {
                System.out.println("Employee found: " + emp);
            } else {
                System.out.println("Employee with ID " + id + " not found.");
            }
        } catch (RuntimeException e) {
            if (transaction.isActive()) {
                transaction.rollback(); 
            }
            else {
           throw e;
        }}
    }

   
    public void updateEmployee(Employee emp) {
        EntityTransaction transaction = em.getTransaction();
        try {
            transaction.begin();
            em.merge(emp); 
            System.out.println("Employee with ID  has been updated." + emp);
            transaction.commit();
        } catch (RuntimeException e) {
            if (transaction.isActive()) {
                transaction.rollback(); 
            }
            else {
            throw e;
        }}
    }

    
    public void deleteEmployee(int id) {
        EntityTransaction transaction = em.getTransaction();
        try {
            transaction.begin();
            Employee emp1 = em.find(Employee.class, id);
            
            if (emp1 != null) {
                em.remove(emp1); 
                System.out.println("Employee with ID " + id + " has been deleted.");
            } else {
                System.out.println("Employee with ID " + id + " not found.");
            }
        } catch (RuntimeException e) {
            if (transaction.isActive()) {
                transaction.rollback(); 
            }
            else {
            throw e;
        }}
    }

}
